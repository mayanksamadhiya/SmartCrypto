/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hotmail.frojasg1.applications.fileencoderapplication;

import com.hotmail.frojasg1.applications.fileencoderapplication.configuration.StringsConfiguration;
import com.hotmail.frojasg1.applications.fileencoderapplication.configuration.ApplicationConfiguration;
import com.hotmail.frojasg1.applications.fileencoder.configuration.ListOfEncryptingConfigurations;
import com.hotmail.frojasg1.applications.fileencoder.configuration.EncryptingConfiguration;
import com.wordpress.tips4java.libtablecolumnadjuster.TableColumnAdjuster;
import com.hotmail.frojasg1.applications.common.components.internationalization.JFrameInternationalization;
import com.hotmail.frojasg1.applications.fileencoderapplication.utils.Utils;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class JDial_listOfEncryptingConfigurations extends javax.swing.JDialog
{

	protected JFrameInternationalization a_intern = null;
	protected final static String a_configurationBaseFileName = "JDial_listOfEncryptingConfigurations";

	/**
	 * Creates new form JDial_listOfEncryptingConfigurations
	 */
	public JDial_listOfEncryptingConfigurations(java.awt.Frame parent,
												String language, boolean modal)
	{
		super(parent, modal);
		initComponents();

		initInternationalization( language, parent );

		float factor = ApplicationConfiguration.M_getInstance().M_getApplicationFontSize();
		M_changeFontSize(factor);
		
		M_refreshJTable();
	}

	protected void initInternationalization( String language, Component parent )
	{
		a_intern = new JFrameInternationalization(	ApplicationConfiguration.sa_MAIN_FOLDER,
													ApplicationConfiguration.sa_APPLICATION_NAME,
													ApplicationConfiguration.sa_CONFIGURATION_GROUP,
													ApplicationConfiguration.sa_PATH_PROPERTIES_IN_JAR,
													a_configurationBaseFileName,
													this,
													parent,
													null,
													true,
													null );
		try
		{
			a_intern.M_changeLanguage( language );
		}
		catch( Throwable th )
		{
			th.printStackTrace();
		}
	}

	public String M_getLanguage()
	{
		String result = ( (a_intern!=null) ? a_intern.M_getLanguage() : null );
		return( result );
	}

	public void M_releaseResources()
	{
		a_intern=null;	// for the garbage collector to free the memory of the internationallization object and after the memory of this form
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jB_editSelectedConfiguration = new javax.swing.JButton();
        jb_exitSavingConfigurations = new javax.swing.JButton();
        jB_editNewConfiguration = new javax.swing.JButton();
        jB_deleteConfiguration = new javax.swing.JButton();
        jb_exitWithoutSavingConfigurations = new javax.swing.JButton();
        jB_restoreDefaultEncryptingConfigurations = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setName("jPanel"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("List of encrypting configurations");
        jLabel1.setName("jL_tittle"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jB_editSelectedConfiguration.setText("Edit selected configuration");
        jB_editSelectedConfiguration.setName("jB_editSelectedConfiguration"); // NOI18N
        jB_editSelectedConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_editSelectedConfigurationActionPerformed(evt);
            }
        });

        jb_exitSavingConfigurations.setText("Exit Saving Configurations");
        jb_exitSavingConfigurations.setName("jb_exitSavingConfigurations"); // NOI18N
        jb_exitSavingConfigurations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_exitSavingConfigurationsActionPerformed(evt);
            }
        });

        jB_editNewConfiguration.setText("Edit new configuration");
        jB_editNewConfiguration.setName("jB_editNewConfiguration"); // NOI18N
        jB_editNewConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_editNewConfigurationActionPerformed(evt);
            }
        });

        jB_deleteConfiguration.setText("Delete configuration");
        jB_deleteConfiguration.setName("jB_deleteConfiguration"); // NOI18N
        jB_deleteConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_deleteConfigurationActionPerformed(evt);
            }
        });

        jb_exitWithoutSavingConfigurations.setText("Exit without saving configurations");
        jb_exitWithoutSavingConfigurations.setName("jb_exitWithoutSavingConfigurations"); // NOI18N
        jb_exitWithoutSavingConfigurations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_exitWithoutSavingConfigurationsActionPerformed(evt);
            }
        });

        jB_restoreDefaultEncryptingConfigurations.setText("Restore Default Encrypting Configurations");
        jB_restoreDefaultEncryptingConfigurations.setName("jB_restoreDefaultEncryptingConfigurations"); // NOI18N
        jB_restoreDefaultEncryptingConfigurations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_restoreDefaultEncryptingConfigurationsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jB_restoreDefaultEncryptingConfigurations)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jB_editNewConfiguration)
                            .addComponent(jB_editSelectedConfiguration)
                            .addComponent(jB_deleteConfiguration))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jb_exitSavingConfigurations)
                            .addComponent(jb_exitWithoutSavingConfigurations))
                        .addGap(51, 51, 51))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_editSelectedConfiguration)
                    .addComponent(jb_exitSavingConfigurations))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_editNewConfiguration)
                    .addComponent(jb_exitWithoutSavingConfigurations))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jB_deleteConfiguration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jB_restoreDefaultEncryptingConfigurations)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_editSelectedConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_editSelectedConfigurationActionPerformed
        // TODO add your handling code here:
		JDial_encryptingConfiguration jdec = null;

		int indexOfRowSelected = M_getSelection();

		if( indexOfRowSelected > -1 )
		{
			EncryptingConfiguration ec = ListOfEncryptingConfigurations.M_getInstance().M_extractEncryptingConfigurationFromVector(indexOfRowSelected);

			jdec = new JDial_encryptingConfiguration( this, true, M_getLanguage() );
			if( ec != null ) jdec.M_setEncryptingConfiguration(ec);

			jdec.setVisible(true);
			
			if( jdec.M_getUserHasPressedOK() )
			{
				ec = jdec.M_getEncryptingConfiguration();
				// the checking if it is not repeated the sizeFrom is done in the JDial_encryptingConfiguration form
				ListOfEncryptingConfigurations.M_getInstance().M_encryptingConfigurationOrderedInsert(ec);
				M_refreshJTable();
			}
			else
			{
				ListOfEncryptingConfigurations.M_getInstance().M_encryptingConfigurationOrderedInsert(ec); // as we extracted the ec, we have to insert it again.
			}
			jdec.M_releaseResources();
		}
    }//GEN-LAST:event_jB_editSelectedConfigurationActionPerformed

    private void jB_editNewConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_editNewConfigurationActionPerformed
        // TODO add your handling code here:

		JDial_encryptingConfiguration jdec = null;

		jdec = new JDial_encryptingConfiguration( this, true, M_getLanguage() );
		jdec.setVisible(true);
			
		if( jdec.M_getUserHasPressedOK() )
		{
			EncryptingConfiguration ec = jdec.M_getEncryptingConfiguration();
			ListOfEncryptingConfigurations.M_getInstance().M_encryptingConfigurationOrderedInsert(ec);
			M_refreshJTable();
		}
		jdec.M_releaseResources();
    }//GEN-LAST:event_jB_editNewConfigurationActionPerformed

    private void jb_exitSavingConfigurationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_exitSavingConfigurationsActionPerformed
        // TODO add your handling code here:
		ListOfEncryptingConfigurations.M_getInstance().M_saveEncryptingConfigurationsToUserFolder();
		M_saveInternationalization();
		setVisible(false);
		M_releaseResources();
    }//GEN-LAST:event_jb_exitSavingConfigurationsActionPerformed

    private void jb_exitWithoutSavingConfigurationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_exitWithoutSavingConfigurationsActionPerformed
        // TODO add your handling code here:

		formWindowClosing(null);
    }//GEN-LAST:event_jb_exitWithoutSavingConfigurationsActionPerformed

    private void jB_deleteConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_deleteConfigurationActionPerformed
        // TODO add your handling code here:

		int indexOfRowSelected = M_getSelection();

		if( indexOfRowSelected > -1 )
		{
			// we discard the EncryptingConfiguration selected.
			EncryptingConfiguration ec = ListOfEncryptingConfigurations.M_getInstance().M_extractEncryptingConfigurationFromVector(indexOfRowSelected);
			M_refreshJTable();
		}
    }//GEN-LAST:event_jB_deleteConfigurationActionPerformed

    private void jB_restoreDefaultEncryptingConfigurationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_restoreDefaultEncryptingConfigurationsActionPerformed
        // TODO add your handling code here:
		
		ListOfEncryptingConfigurations.M_getInstance().M_loadEncryptingConfigurationsFromClassPath();
		M_refreshJTable();
		
    }//GEN-LAST:event_jB_restoreDefaultEncryptingConfigurationsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
		
		M_saveInternationalization();
		setVisible(false);
		M_releaseResources();
		ListOfEncryptingConfigurations.M_getInstance().M_loadEncryptingConfigurations();
    }//GEN-LAST:event_formWindowClosing

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {

		ListOfEncryptingConfigurations.M_getInstance().M_loadEncryptingConfigurations();
		
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
/*
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JDial_listOfEncryptingConfigurations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JDial_listOfEncryptingConfigurations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JDial_listOfEncryptingConfigurations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JDial_listOfEncryptingConfigurations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
*/
		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				JDial_listOfEncryptingConfigurations dialog = new JDial_listOfEncryptingConfigurations(new javax.swing.JFrame(), null, true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_deleteConfiguration;
    private javax.swing.JButton jB_editNewConfiguration;
    private javax.swing.JButton jB_editSelectedConfiguration;
    private javax.swing.JButton jB_restoreDefaultEncryptingConfigurations;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jb_exitSavingConfigurations;
    private javax.swing.JButton jb_exitWithoutSavingConfigurations;
    // End of variables declaration//GEN-END:variables

	protected Object[] M_getTableTitles()
	{
		Object[] titles = new String[7];

		titles[0] = EncryptingConfiguration.STR_CONF_SIZE_FROM;
		titles[1] = EncryptingConfiguration.STR_CONF_FILE_ENCODER_TYPE;
		titles[2] = EncryptingConfiguration.STR_CONF_NUM_BYTES_FILE_SLICE;
		titles[3] = EncryptingConfiguration.STR_CONF_SIZE_OF_NUMBERS_SIMPLE_ENCODER;
		titles[4] = EncryptingConfiguration.STR_CONF_SIZE_OF_NUMBERS_REORDERER_ENCODER;
		titles[5] = EncryptingConfiguration.STR_CONF_NUMBER_OF_BITS_PER_ITERATION_SIMPLE_ENCODER;
		titles[6] = EncryptingConfiguration.STR_CONF_NUMBER_OF_BITS_PER_ITERATION_REORDERER_ENCODER;

		return( titles );
	}

	protected Object[] M_getRowData( EncryptingConfiguration ec )
	{
		Object[] rowData = new String[7];

		rowData[0] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_SIZE_FROM);
		rowData[1] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_FILE_ENCODER_TYPE);
		rowData[2] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_NUM_BYTES_FILE_SLICE);
		rowData[3] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_SIZE_OF_NUMBERS_SIMPLE_ENCODER);
		rowData[4] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_SIZE_OF_NUMBERS_REORDERER_ENCODER);
		rowData[5] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_NUMBER_OF_BITS_PER_ITERATION_SIMPLE_ENCODER);
		rowData[6] = ec.M_getStrParamConfiguration(EncryptingConfiguration.STR_CONF_NUMBER_OF_BITS_PER_ITERATION_REORDERER_ENCODER);

		return( rowData );
	}

	protected void M_adjustColumnWidths()
	{
		TableColumnAdjuster tca = new TableColumnAdjuster(jTable1);
		tca.adjustColumns();
	}

	protected void M_refreshJTable()
	{
		DefaultTableModel dtm = new DefaultTableModel();
		dtm.setColumnIdentifiers( M_getTableTitles() );
		
		EncryptingConfiguration ec = null;
		int index = 0;
		do
		{
			ec = ListOfEncryptingConfigurations.M_getInstance().M_getEncryptingConfigurationFromVector(index);
			if( ec != null )
				dtm.addRow( M_getRowData( ec ) );
			index++;
		}
		while( ec != null );
		
		jTable1.setModel( dtm );

		for (int ii = 0; ii < jTable1.getColumnCount(); ii++)
		{
			Class<?> col_class = jTable1.getColumnClass(ii);
			jTable1.setDefaultEditor(col_class, null);        // remove editor
		}
		
		M_adjustColumnWidths();
	}

	protected int M_getSelection()
	{
		int result = -1;

		int[] selection = jTable1.getSelectedRows();
		if( ( selection != null ) && ( selection.length>0 ) )
		{
			for (int ii = 0; ii < selection.length; ii++)
			{
				selection[ii] = jTable1.convertRowIndexToModel(selection[ii]);
			}

			result = selection[0];
		}
		else
		{
            Utils.showMessageDialog(this,
                    StringsConfiguration.M_getInstance().M_getStrParamConfiguration(StringsConfiguration.CONF_FILE_HAVE_TO_SELECT_ROW_OF_TABLE),
                    StringsConfiguration.M_getInstance().M_getStrParamConfiguration(StringsConfiguration.CONF_FILE_SELECTION_ERROR),
                    JOptionPane.ERROR_MESSAGE);
		}

		return( result );
	}

	protected void M_saveInternationalization()
	{
		try
		{
			if( a_intern != null ) a_intern.saveConfiguration();
		}
		catch( Throwable th )
		{
			th.printStackTrace();
		}
	}
	
	public void M_changeFontSize( float factor )
	{
		if( a_intern != null )
		{
			a_intern.M_changeFontSize(factor);
		}
	}
}
